# 开发工作流指南

## 环境设置
- 使用Poetry管理虚拟环境
- 激活环境：`poetry shell`
- 安装依赖：`poetry install`
- 添加新依赖：`poetry add package-name`

## 代码开发
- 遵循项目结构规范
- 使用类型注解
- 编写单元测试
- 保持代码文档更新

## 测试和调试
- 运行测试：`poetry run pytest`
- 启动开发服务器：`poetry run uvicorn mindmatrix.web._app:app --reload`
- 使用loguru进行调试日志
- 检查代码质量：`poetry run black .`

## 版本控制
- 遵循Git工作流
- 有意义的提交信息
- 使用[.gitignore](mdc:.gitignore)忽略不必要的文件
- 定期同步远程仓库

## 部署准备
- 更新[pyproject.toml](mdc:pyproject.toml)版本号
- 检查依赖兼容性
- 准备部署配置
- 测试生产环境

## 文档维护
- 更新[README.md](mdc:README.md)
- 维护API文档
- 记录重要变更
- 更新使用示例
